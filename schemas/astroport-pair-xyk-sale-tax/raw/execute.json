{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "ExecuteMsg",
  "description": "This structure describes the execute messages available in the contract.",
  "oneOf": [
    {
      "description": "Receives a message of type [`Cw20ReceiveMsg`]",
      "type": "object",
      "required": [
        "receive"
      ],
      "properties": {
        "receive": {
          "$ref": "#/definitions/Cw20ReceiveMsg"
        }
      },
      "additionalProperties": false
    },
    {
      "description": "ProvideLiquidity allows someone to provide liquidity in the pool",
      "type": "object",
      "required": [
        "provide_liquidity"
      ],
      "properties": {
        "provide_liquidity": {
          "type": "object",
          "required": [
            "assets"
          ],
          "properties": {
            "assets": {
              "description": "The assets available in the pool",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Asset"
              }
            },
            "auto_stake": {
              "description": "Determines whether the LP tokens minted for the user is auto_staked in the Incentives contract",
              "type": [
                "boolean",
                "null"
              ]
            },
            "min_lp_to_receive": {
              "anyOf": [
                {
                  "$ref": "#/definitions/Uint128"
                },
                {
                  "type": "null"
                }
              ]
            },
            "receiver": {
              "description": "The receiver of LP tokens",
              "type": [
                "string",
                "null"
              ]
            },
            "slippage_tolerance": {
              "description": "The slippage tolerance that allows liquidity provision only if the price in the pool doesn't move too much",
              "anyOf": [
                {
                  "$ref": "#/definitions/Decimal"
                },
                {
                  "type": "null"
                }
              ]
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "description": "WithdrawLiquidity allows someone to withdraw liquidity from the pool",
      "type": "object",
      "required": [
        "withdraw_liquidity"
      ],
      "properties": {
        "withdraw_liquidity": {
          "type": "object",
          "properties": {
            "assets": {
              "default": [],
              "type": "array",
              "items": {
                "$ref": "#/definitions/Asset"
              }
            },
            "min_assets_to_receive": {
              "type": [
                "array",
                "null"
              ],
              "items": {
                "$ref": "#/definitions/Asset"
              }
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Swap performs a swap in the pool",
      "type": "object",
      "required": [
        "swap"
      ],
      "properties": {
        "swap": {
          "type": "object",
          "required": [
            "offer_asset"
          ],
          "properties": {
            "ask_asset_info": {
              "anyOf": [
                {
                  "$ref": "#/definitions/AssetInfo"
                },
                {
                  "type": "null"
                }
              ]
            },
            "belief_price": {
              "anyOf": [
                {
                  "$ref": "#/definitions/Decimal"
                },
                {
                  "type": "null"
                }
              ]
            },
            "max_spread": {
              "anyOf": [
                {
                  "$ref": "#/definitions/Decimal"
                },
                {
                  "type": "null"
                }
              ]
            },
            "offer_asset": {
              "$ref": "#/definitions/Asset"
            },
            "to": {
              "type": [
                "string",
                "null"
              ]
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Update the pair configuration",
      "type": "object",
      "required": [
        "update_config"
      ],
      "properties": {
        "update_config": {
          "type": "object",
          "required": [
            "params"
          ],
          "properties": {
            "params": {
              "$ref": "#/definitions/Binary"
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "description": "ProposeNewOwner creates a proposal to change contract ownership. The validity period for the proposal is set in the `expires_in` variable.",
      "type": "object",
      "required": [
        "propose_new_owner"
      ],
      "properties": {
        "propose_new_owner": {
          "type": "object",
          "required": [
            "expires_in",
            "owner"
          ],
          "properties": {
            "expires_in": {
              "description": "The date after which this proposal expires",
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            },
            "owner": {
              "description": "Newly proposed contract owner",
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "description": "DropOwnershipProposal removes the existing offer to change contract ownership.",
      "type": "object",
      "required": [
        "drop_ownership_proposal"
      ],
      "properties": {
        "drop_ownership_proposal": {
          "type": "object",
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Used to claim contract ownership.",
      "type": "object",
      "required": [
        "claim_ownership"
      ],
      "properties": {
        "claim_ownership": {
          "type": "object",
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Custom execute endpoints for extended pool implementations",
      "type": "object",
      "required": [
        "custom"
      ],
      "properties": {
        "custom": {
          "$ref": "#/definitions/Empty"
        }
      },
      "additionalProperties": false
    }
  ],
  "definitions": {
    "Addr": {
      "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
      "type": "string"
    },
    "Asset": {
      "description": "This enum describes a Terra asset (native or CW20).",
      "type": "object",
      "required": [
        "amount",
        "info"
      ],
      "properties": {
        "amount": {
          "description": "A token amount",
          "allOf": [
            {
              "$ref": "#/definitions/Uint128"
            }
          ]
        },
        "info": {
          "description": "Information about an asset stored in a [`AssetInfo`] struct",
          "allOf": [
            {
              "$ref": "#/definitions/AssetInfo"
            }
          ]
        }
      },
      "additionalProperties": false
    },
    "AssetInfo": {
      "description": "This enum describes available Token types. ## Examples ``` # use cosmwasm_std::Addr; # use astroport::asset::AssetInfo::{NativeToken, Token}; Token { contract_addr: Addr::unchecked(\"stake...\") }; NativeToken { denom: String::from(\"uluna\") }; ```",
      "oneOf": [
        {
          "description": "Non-native Token",
          "type": "object",
          "required": [
            "token"
          ],
          "properties": {
            "token": {
              "type": "object",
              "required": [
                "contract_addr"
              ],
              "properties": {
                "contract_addr": {
                  "$ref": "#/definitions/Addr"
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        {
          "description": "Native token",
          "type": "object",
          "required": [
            "native_token"
          ],
          "properties": {
            "native_token": {
              "type": "object",
              "required": [
                "denom"
              ],
              "properties": {
                "denom": {
                  "type": "string"
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "Binary": {
      "description": "Binary is a wrapper around Vec<u8> to add base64 de/serialization with serde. It also adds some helper methods to help encode inline.\n\nThis is only needed as serde-json-{core,wasm} has a horrible encoding for Vec<u8>. See also <https://github.com/CosmWasm/cosmwasm/blob/main/docs/MESSAGE_TYPES.md>.",
      "type": "string"
    },
    "Cw20ReceiveMsg": {
      "description": "Cw20ReceiveMsg should be de/serialized under `Receive()` variant in a ExecuteMsg",
      "type": "object",
      "required": [
        "amount",
        "msg",
        "sender"
      ],
      "properties": {
        "amount": {
          "$ref": "#/definitions/Uint128"
        },
        "msg": {
          "$ref": "#/definitions/Binary"
        },
        "sender": {
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "Decimal": {
      "description": "A fixed-point decimal value with 18 fractional digits, i.e. Decimal(1_000_000_000_000_000_000) == 1.0\n\nThe greatest possible value that can be represented is 340282366920938463463.374607431768211455 (which is (2^128 - 1) / 10^18)",
      "type": "string"
    },
    "Empty": {
      "description": "An empty struct that serves as a placeholder in different places, such as contracts that don't set a custom message.\n\nIt is designed to be expressable in correct JSON and JSON Schema but contains no meaningful data. Previously we used enums without cases, but those cannot represented as valid JSON Schema (https://github.com/CosmWasm/cosmwasm/issues/451)",
      "type": "object"
    },
    "Uint128": {
      "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
      "type": "string"
    }
  }
}
