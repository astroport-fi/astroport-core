{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "Config",
  "description": "This structure stores the main parameters for the Maker contract.",
  "type": "object",
  "required": [
    "astro_denom",
    "collector",
    "factory_contract",
    "max_spread",
    "owner"
  ],
  "properties": {
    "astro_denom": {
      "description": "ASTRO denom",
      "type": "string"
    },
    "collect_cooldown": {
      "description": "If set defines the period when maker collect can be called",
      "type": [
        "integer",
        "null"
      ],
      "format": "uint64",
      "minimum": 0.0
    },
    "collector": {
      "description": "Address which receives all swapped Astro. On the Hub it simply sends astro to the staking contract; On an outpost - triggers IBC send on the satellite contract.",
      "allOf": [
        {
          "$ref": "#/definitions/Addr"
        }
      ]
    },
    "dev_fund_conf": {
      "description": "The dev fund configuration",
      "anyOf": [
        {
          "$ref": "#/definitions/DevFundConfig"
        },
        {
          "type": "null"
        }
      ]
    },
    "factory_contract": {
      "description": "The factory contract address",
      "allOf": [
        {
          "$ref": "#/definitions/Addr"
        }
      ]
    },
    "max_spread": {
      "description": "The maximum spread used when swapping fee tokens to ASTRO",
      "allOf": [
        {
          "$ref": "#/definitions/Decimal"
        }
      ]
    },
    "owner": {
      "description": "Address that's allowed to set contract parameters",
      "allOf": [
        {
          "$ref": "#/definitions/Addr"
        }
      ]
    }
  },
  "additionalProperties": false,
  "definitions": {
    "Addr": {
      "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
      "type": "string"
    },
    "AssetInfo": {
      "description": "This enum describes available Token types. ## Examples ``` # use cosmwasm_std::Addr; # use astroport::asset::AssetInfo::{NativeToken, Token}; Token { contract_addr: Addr::unchecked(\"stake...\") }; NativeToken { denom: String::from(\"uluna\") }; ```",
      "oneOf": [
        {
          "description": "Non-native Token",
          "type": "object",
          "required": [
            "token"
          ],
          "properties": {
            "token": {
              "type": "object",
              "required": [
                "contract_addr"
              ],
              "properties": {
                "contract_addr": {
                  "$ref": "#/definitions/Addr"
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        {
          "description": "Native token",
          "type": "object",
          "required": [
            "native_token"
          ],
          "properties": {
            "native_token": {
              "type": "object",
              "required": [
                "denom"
              ],
              "properties": {
                "denom": {
                  "type": "string"
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "Decimal": {
      "description": "A fixed-point decimal value with 18 fractional digits, i.e. Decimal(1_000_000_000_000_000_000) == 1.0\n\nThe greatest possible value that can be represented is 340282366920938463463.374607431768211455 (which is (2^128 - 1) / 10^18)",
      "type": "string"
    },
    "DevFundConfig": {
      "type": "object",
      "required": [
        "address",
        "asset_info",
        "pool_addr",
        "share"
      ],
      "properties": {
        "address": {
          "description": "The dev fund address",
          "type": "string"
        },
        "asset_info": {
          "description": "Asset that devs want ASTRO to be swapped to",
          "allOf": [
            {
              "$ref": "#/definitions/AssetInfo"
            }
          ]
        },
        "pool_addr": {
          "description": "Pair address to swap ASTRO to dev's reserve asset",
          "allOf": [
            {
              "$ref": "#/definitions/Addr"
            }
          ]
        },
        "share": {
          "description": "The percentage of fees that go to the dev fund",
          "allOf": [
            {
              "$ref": "#/definitions/Decimal"
            }
          ]
        }
      },
      "additionalProperties": false
    }
  }
}
