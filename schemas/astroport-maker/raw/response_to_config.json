{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "ConfigResponse",
  "description": "A custom struct that holds contract parameters and is used to retrieve them.",
  "type": "object",
  "required": [
    "astro_token",
    "factory_contract",
    "governance_percent",
    "max_spread",
    "owner",
    "pre_upgrade_astro_amount",
    "remainder_reward"
  ],
  "properties": {
    "astro_token": {
      "description": "The ASTRO token asset info",
      "allOf": [
        {
          "$ref": "#/definitions/AssetInfo"
        }
      ]
    },
    "default_bridge": {
      "description": "Default bridge (Terra1 - LUNC, Terra2 - LUNA, etc.)",
      "anyOf": [
        {
          "$ref": "#/definitions/AssetInfo"
        },
        {
          "type": "null"
        }
      ]
    },
    "dev_fund_conf": {
      "description": "The dev fund configuration",
      "anyOf": [
        {
          "$ref": "#/definitions/DevFundConfig"
        },
        {
          "type": "null"
        }
      ]
    },
    "factory_contract": {
      "description": "The factory contract address",
      "allOf": [
        {
          "$ref": "#/definitions/Addr"
        }
      ]
    },
    "governance_contract": {
      "description": "The governance contract address (fee distributor for vxASTRO stakers)",
      "anyOf": [
        {
          "$ref": "#/definitions/Addr"
        },
        {
          "type": "null"
        }
      ]
    },
    "governance_percent": {
      "description": "The percentage of fees that go to governance_contract",
      "allOf": [
        {
          "$ref": "#/definitions/Uint64"
        }
      ]
    },
    "max_spread": {
      "description": "The maximum spread used when swapping fee tokens to ASTRO",
      "allOf": [
        {
          "$ref": "#/definitions/Decimal"
        }
      ]
    },
    "owner": {
      "description": "Address that is allowed to update contract parameters",
      "allOf": [
        {
          "$ref": "#/definitions/Addr"
        }
      ]
    },
    "pre_upgrade_astro_amount": {
      "description": "The amount of ASTRO tokens accrued before upgrading the Maker implementation and enabling reward distribution",
      "allOf": [
        {
          "$ref": "#/definitions/Uint128"
        }
      ]
    },
    "remainder_reward": {
      "description": "The remainder ASTRO tokens (accrued before the Maker is upgraded) to be distributed to xASTRO stakers",
      "allOf": [
        {
          "$ref": "#/definitions/Uint128"
        }
      ]
    },
    "second_receiver_cfg": {
      "description": "Parameters that describe the second receiver of fees",
      "anyOf": [
        {
          "$ref": "#/definitions/SecondReceiverConfig"
        },
        {
          "type": "null"
        }
      ]
    },
    "staking_contract": {
      "description": "The xASTRO staking contract address",
      "anyOf": [
        {
          "$ref": "#/definitions/Addr"
        },
        {
          "type": "null"
        }
      ]
    }
  },
  "additionalProperties": false,
  "definitions": {
    "Addr": {
      "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
      "type": "string"
    },
    "AssetInfo": {
      "description": "This enum describes available Token types. ## Examples ``` # use cosmwasm_std::Addr; # use astroport::asset::AssetInfo::{NativeToken, Token}; Token { contract_addr: Addr::unchecked(\"stake...\") }; NativeToken { denom: String::from(\"uluna\") }; ```",
      "oneOf": [
        {
          "description": "Non-native Token",
          "type": "object",
          "required": [
            "token"
          ],
          "properties": {
            "token": {
              "type": "object",
              "required": [
                "contract_addr"
              ],
              "properties": {
                "contract_addr": {
                  "$ref": "#/definitions/Addr"
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        {
          "description": "Native token",
          "type": "object",
          "required": [
            "native_token"
          ],
          "properties": {
            "native_token": {
              "type": "object",
              "required": [
                "denom"
              ],
              "properties": {
                "denom": {
                  "type": "string"
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "Decimal": {
      "description": "A fixed-point decimal value with 18 fractional digits, i.e. Decimal(1_000_000_000_000_000_000) == 1.0\n\nThe greatest possible value that can be represented is 340282366920938463463.374607431768211455 (which is (2^128 - 1) / 10^18)",
      "type": "string"
    },
    "DevFundConfig": {
      "type": "object",
      "required": [
        "address",
        "asset_info",
        "share"
      ],
      "properties": {
        "address": {
          "description": "The dev fund address",
          "type": "string"
        },
        "asset_info": {
          "description": "Asset that devs want ASTRO to be swapped to",
          "allOf": [
            {
              "$ref": "#/definitions/AssetInfo"
            }
          ]
        },
        "share": {
          "description": "The percentage of fees that go to the dev fund",
          "allOf": [
            {
              "$ref": "#/definitions/Decimal"
            }
          ]
        }
      },
      "additionalProperties": false
    },
    "SecondReceiverConfig": {
      "description": "This structure stores the parameters for the second receiver of fees.",
      "type": "object",
      "required": [
        "second_fee_receiver",
        "second_receiver_cut"
      ],
      "properties": {
        "second_fee_receiver": {
          "description": "The second fee receiver contract address",
          "allOf": [
            {
              "$ref": "#/definitions/Addr"
            }
          ]
        },
        "second_receiver_cut": {
          "description": "The percentage of fees that go to the second fee receiver",
          "allOf": [
            {
              "$ref": "#/definitions/Uint64"
            }
          ]
        }
      },
      "additionalProperties": false
    },
    "Uint128": {
      "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
      "type": "string"
    },
    "Uint64": {
      "description": "A thin wrapper around u64 that is using strings for JSON encoding/decoding, such that the full u64 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u64` to get the value out:\n\n``` # use cosmwasm_std::Uint64; let a = Uint64::from(42u64); assert_eq!(a.u64(), 42);\n\nlet b = Uint64::from(70u32); assert_eq!(b.u64(), 70); ```",
      "type": "string"
    }
  }
}
