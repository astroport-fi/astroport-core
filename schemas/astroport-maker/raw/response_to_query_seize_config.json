{
  "$schema": "http://json-schema.org/draft-07/schema#",
<<<<<<<< HEAD:schemas/astroport-maker/raw/response_to_query_seize_config.json
  "title": "SeizeConfig",
  "type": "object",
  "required": [
    "receiver",
    "seizable_assets"
========
  "title": "QueryMsg",
  "description": "This structure describes the query functions available in the contract.",
  "oneOf": [
    {
      "description": "Returns information about the maker configs that contains in the [`ConfigResponse`]",
      "type": "object",
      "required": [
        "config"
      ],
      "properties": {
        "config": {
          "type": "object",
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Returns the balance for each asset in the specified input parameters",
      "type": "object",
      "required": [
        "balances"
      ],
      "properties": {
        "balances": {
          "type": "object",
          "required": [
            "assets"
          ],
          "properties": {
            "assets": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AssetInfo"
              }
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "bridges"
      ],
      "properties": {
        "bridges": {
          "type": "object",
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Returns the seize config",
      "type": "object",
      "required": [
        "query_seize_config"
      ],
      "properties": {
        "query_seize_config": {
          "type": "object",
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    }
>>>>>>>> origin/main:schemas/astroport-maker/raw/query.json
  ],
  "properties": {
    "receiver": {
      "description": "The address of the contract that will receive the seized tokens",
      "allOf": [
        {
          "$ref": "#/definitions/Addr"
        }
      ]
    },
    "seizable_assets": {
      "description": "The assets that can be seized",
      "type": "array",
      "items": {
        "$ref": "#/definitions/AssetInfo"
      }
    }
  },
  "additionalProperties": false,
  "definitions": {
    "Addr": {
      "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
      "type": "string"
    },
    "AssetInfo": {
      "description": "This enum describes available Token types. ## Examples ``` # use cosmwasm_std::Addr; # use astroport::asset::AssetInfo::{NativeToken, Token}; Token { contract_addr: Addr::unchecked(\"stake...\") }; NativeToken { denom: String::from(\"uluna\") }; ```",
      "oneOf": [
        {
          "description": "Non-native Token",
          "type": "object",
          "required": [
            "token"
          ],
          "properties": {
            "token": {
              "type": "object",
              "required": [
                "contract_addr"
              ],
              "properties": {
                "contract_addr": {
                  "$ref": "#/definitions/Addr"
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        {
          "description": "Native token",
          "type": "object",
          "required": [
            "native_token"
          ],
          "properties": {
            "native_token": {
              "type": "object",
              "required": [
                "denom"
              ],
              "properties": {
                "denom": {
                  "type": "string"
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        }
      ]
    }
  }
}
