{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "ExecuteMsg",
  "description": "This structure describes the functions that can be executed in this contract.",
  "oneOf": [
    {
      "description": "Collects and swaps fee tokens to ASTRO",
      "type": "object",
      "required": [
        "collect"
      ],
      "properties": {
        "collect": {
          "type": "object",
          "required": [
            "assets"
          ],
          "properties": {
            "assets": {
              "description": "The assets to swap to ASTRO",
              "type": "array",
              "items": {
                "$ref": "#/definitions/AssetWithLimit"
              }
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Updates general settings",
      "type": "object",
      "required": [
        "update_config"
      ],
      "properties": {
        "update_config": {
          "type": "object",
          "properties": {
            "astro_denom": {
              "description": "ASTRO denom",
              "type": [
                "string",
                "null"
              ]
            },
            "collect_cooldown": {
              "description": "Defines the period when maker collect can be called",
              "type": [
                "integer",
                "null"
              ],
              "format": "uint64",
              "minimum": 0.0
            },
            "collector": {
              "description": "Address which receives all swapped Astro. On the Hub it simply sends astro to the staking contract; On an outpost - triggers IBC send on the satellite contract.",
              "type": [
                "string",
                "null"
              ]
            },
            "dev_fund_config": {
              "description": "Dev tax configuration",
              "anyOf": [
                {
                  "$ref": "#/definitions/UpdateDevFundConfig"
                },
                {
                  "type": "null"
                }
              ]
            },
            "max_spread": {
              "description": "The maximum spread used when swapping fee tokens to ASTRO",
              "anyOf": [
                {
                  "$ref": "#/definitions/Decimal"
                },
                {
                  "type": "null"
                }
              ]
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Configure specific pool addresses for swapping asset_in to asset_out. If a route already exists, it will be overwritten.",
      "type": "object",
      "required": [
        "set_pool_routes"
      ],
      "properties": {
        "set_pool_routes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PoolRoute"
          }
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Self-call endpoint used to swap the whole asset_in balance. No one by Maker contract can call this endpoint.",
      "type": "object",
      "required": [
        "auto_swap"
      ],
      "properties": {
        "auto_swap": {
          "type": "object",
          "required": [
            "asset_in",
            "asset_out",
            "pool_addr"
          ],
          "properties": {
            "asset_in": {
              "$ref": "#/definitions/AssetInfo"
            },
            "asset_out": {
              "$ref": "#/definitions/AssetInfo"
            },
            "pool_addr": {
              "$ref": "#/definitions/Addr"
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Creates a request to change the contract's ownership",
      "type": "object",
      "required": [
        "propose_new_owner"
      ],
      "properties": {
        "propose_new_owner": {
          "type": "object",
          "required": [
            "expires_in",
            "owner"
          ],
          "properties": {
            "expires_in": {
              "description": "The validity period of the proposal to change the owner",
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            },
            "owner": {
              "description": "The newly proposed owner",
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Removes a request to change contract ownership",
      "type": "object",
      "required": [
        "drop_ownership_proposal"
      ],
      "properties": {
        "drop_ownership_proposal": {
          "type": "object",
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Claims contract ownership",
      "type": "object",
      "required": [
        "claim_ownership"
      ],
      "properties": {
        "claim_ownership": {
          "type": "object",
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Permissionless endpoint that sends certain assets to predefined seizing address",
      "type": "object",
      "required": [
        "seize"
      ],
      "properties": {
        "seize": {
          "type": "object",
          "required": [
            "assets"
          ],
          "properties": {
            "assets": {
              "description": "The assets to seize",
              "type": "array",
              "items": {
                "$ref": "#/definitions/AssetWithLimit"
              }
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Sets parameters for seizing assets. Permissioned to a contract owner. If governance wants to stop seizing assets, it can set an empty list of seizable assets.",
      "type": "object",
      "required": [
        "update_seize_config"
      ],
      "properties": {
        "update_seize_config": {
          "type": "object",
          "properties": {
            "receiver": {
              "description": "The address that will receive the seized tokens",
              "type": [
                "string",
                "null"
              ]
            },
            "seizable_assets": {
              "description": "The assets that can be seized. Resets the list to this one every time it is executed",
              "default": [],
              "type": "array",
              "items": {
                "$ref": "#/definitions/AssetInfo"
              }
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    }
  ],
  "definitions": {
    "Addr": {
      "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
      "type": "string"
    },
    "AssetInfo": {
      "description": "This enum describes available Token types. ## Examples ``` # use cosmwasm_std::Addr; # use astroport::asset::AssetInfo::{NativeToken, Token}; Token { contract_addr: Addr::unchecked(\"stake...\") }; NativeToken { denom: String::from(\"uluna\") }; ```",
      "oneOf": [
        {
          "description": "Non-native Token",
          "type": "object",
          "required": [
            "token"
          ],
          "properties": {
            "token": {
              "type": "object",
              "required": [
                "contract_addr"
              ],
              "properties": {
                "contract_addr": {
                  "$ref": "#/definitions/Addr"
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        {
          "description": "Native token",
          "type": "object",
          "required": [
            "native_token"
          ],
          "properties": {
            "native_token": {
              "type": "object",
              "required": [
                "denom"
              ],
              "properties": {
                "denom": {
                  "type": "string"
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "AssetWithLimit": {
      "description": "This struct holds parameters to help with swapping a specific amount of a fee token to ASTRO.",
      "type": "object",
      "required": [
        "info"
      ],
      "properties": {
        "info": {
          "description": "Information about the fee token to swap",
          "allOf": [
            {
              "$ref": "#/definitions/AssetInfo"
            }
          ]
        },
        "limit": {
          "description": "The amount of tokens to swap",
          "anyOf": [
            {
              "$ref": "#/definitions/Uint128"
            },
            {
              "type": "null"
            }
          ]
        }
      },
      "additionalProperties": false
    },
    "Decimal": {
      "description": "A fixed-point decimal value with 18 fractional digits, i.e. Decimal(1_000_000_000_000_000_000) == 1.0\n\nThe greatest possible value that can be represented is 340282366920938463463.374607431768211455 (which is (2^128 - 1) / 10^18)",
      "type": "string"
    },
    "DevFundConfig": {
      "type": "object",
      "required": [
        "address",
        "asset_info",
        "pool_addr",
        "share"
      ],
      "properties": {
        "address": {
          "description": "The dev fund address",
          "type": "string"
        },
        "asset_info": {
          "description": "Asset that devs want ASTRO to be swapped to",
          "allOf": [
            {
              "$ref": "#/definitions/AssetInfo"
            }
          ]
        },
        "pool_addr": {
          "description": "Pair address to swap ASTRO to dev's reserve asset",
          "allOf": [
            {
              "$ref": "#/definitions/Addr"
            }
          ]
        },
        "share": {
          "description": "The percentage of fees that go to the dev fund",
          "allOf": [
            {
              "$ref": "#/definitions/Decimal"
            }
          ]
        }
      },
      "additionalProperties": false
    },
    "PoolRoute": {
      "type": "object",
      "required": [
        "asset_in",
        "asset_out",
        "pool_addr"
      ],
      "properties": {
        "asset_in": {
          "$ref": "#/definitions/AssetInfo"
        },
        "asset_out": {
          "$ref": "#/definitions/AssetInfo"
        },
        "pool_addr": {
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "Uint128": {
      "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
      "type": "string"
    },
    "UpdateDevFundConfig": {
      "type": "object",
      "properties": {
        "set": {
          "description": "If 'set' is None then dev fund config will be removed, otherwise it will be updated with the new parameters",
          "anyOf": [
            {
              "$ref": "#/definitions/DevFundConfig"
            },
            {
              "type": "null"
            }
          ]
        }
      },
      "additionalProperties": false
    }
  }
}
