{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "ExecuteMsg",
  "description": "This structure describes the execute messages of the contract.",
  "oneOf": [
    {
      "description": "UpdateConfig updates relevant code IDs",
      "type": "object",
      "required": [
        "update_config"
      ],
      "properties": {
        "update_config": {
          "type": "object",
          "properties": {
            "coin_registry_address": {
              "description": "The address of the contract that contains the coins and their accuracy",
              "type": [
                "string",
                "null"
              ]
            },
            "creation_fee": {
              "description": "Pair creation fee. Prevents over-spamming with useless pairs.",
              "anyOf": [
                {
                  "$ref": "#/definitions/Coin"
                },
                {
                  "type": "null"
                }
              ]
            },
            "fee_address": {
              "description": "Contract address to send governance fees to (the Maker)",
              "type": [
                "string",
                "null"
              ]
            },
            "generator_address": {
              "description": "Contract address where Lp tokens can be auto_staked after someone provides liquidity in an incentivized Astroport pool",
              "type": [
                "string",
                "null"
              ]
            },
            "token_code_id": {
              "description": "CW20 token contract code identifier",
              "type": [
                "integer",
                "null"
              ],
              "format": "uint64",
              "minimum": 0.0
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "description": "UpdatePairConfig updates the config for a pair type.",
      "type": "object",
      "required": [
        "update_pair_config"
      ],
      "properties": {
        "update_pair_config": {
          "type": "object",
          "required": [
            "config"
          ],
          "properties": {
            "config": {
              "description": "New [`PairConfig`] settings for a pair type",
              "allOf": [
                {
                  "$ref": "#/definitions/PairConfig"
                }
              ]
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "description": "CreatePair instantiates a new pair contract.",
      "type": "object",
      "required": [
        "create_pair"
      ],
      "properties": {
        "create_pair": {
          "type": "object",
          "required": [
            "asset_infos",
            "pair_type"
          ],
          "properties": {
            "asset_infos": {
              "description": "The assets to create the pool for",
              "type": "array",
              "items": {
                "$ref": "#/definitions/AssetInfo"
              }
            },
            "init_params": {
              "description": "Optional binary serialised parameters for custom pool types",
              "anyOf": [
                {
                  "$ref": "#/definitions/Binary"
                },
                {
                  "type": "null"
                }
              ]
            },
            "pair_type": {
              "description": "The pair type (exposed in [`PairType`])",
              "allOf": [
                {
                  "$ref": "#/definitions/PairType"
                }
              ]
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "description": "ProposeNewOwner creates a proposal to change contract ownership. The validity period for the proposal is set in the `expires_in` variable.",
      "type": "object",
      "required": [
        "propose_new_owner"
      ],
      "properties": {
        "propose_new_owner": {
          "type": "object",
          "required": [
            "expires_in",
            "owner"
          ],
          "properties": {
            "expires_in": {
              "description": "The date after which this proposal expires",
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            },
            "owner": {
              "description": "Newly proposed contract owner",
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "description": "DropOwnershipProposal removes the existing offer to change contract ownership.",
      "type": "object",
      "required": [
        "drop_ownership_proposal"
      ],
      "properties": {
        "drop_ownership_proposal": {
          "type": "object",
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Used to claim contract ownership.",
      "type": "object",
      "required": [
        "claim_ownership"
      ],
      "properties": {
        "claim_ownership": {
          "type": "object",
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    }
  ],
  "definitions": {
    "Addr": {
      "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
      "type": "string"
    },
    "AssetInfo": {
      "description": "This enum describes available Token types. ## Examples ``` # use cosmwasm_std::Addr; # use astroport::asset::AssetInfo::{NativeToken, Token}; Token { contract_addr: Addr::unchecked(\"stake...\") }; NativeToken { denom: String::from(\"uluna\") }; ```",
      "oneOf": [
        {
          "description": "Non-native Token",
          "type": "object",
          "required": [
            "token"
          ],
          "properties": {
            "token": {
              "type": "object",
              "required": [
                "contract_addr"
              ],
              "properties": {
                "contract_addr": {
                  "$ref": "#/definitions/Addr"
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        {
          "description": "Native token",
          "type": "object",
          "required": [
            "native_token"
          ],
          "properties": {
            "native_token": {
              "type": "object",
              "required": [
                "denom"
              ],
              "properties": {
                "denom": {
                  "type": "string"
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "Binary": {
      "description": "Binary is a wrapper around Vec<u8> to add base64 de/serialization with serde. It also adds some helper methods to help encode inline.\n\nThis is only needed as serde-json-{core,wasm} has a horrible encoding for Vec<u8>. See also <https://github.com/CosmWasm/cosmwasm/blob/main/docs/MESSAGE_TYPES.md>.",
      "type": "string"
    },
    "Coin": {
      "type": "object",
      "required": [
        "amount",
        "denom"
      ],
      "properties": {
        "amount": {
          "$ref": "#/definitions/Uint128"
        },
        "denom": {
          "type": "string"
        }
      }
    },
    "PairConfig": {
      "description": "This structure stores a pair type's configuration.",
      "type": "object",
      "required": [
        "code_id",
        "maker_fee_bps",
        "pair_type",
        "total_fee_bps"
      ],
      "properties": {
        "code_id": {
          "description": "ID of contract which is allowed to create pairs of this type",
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        },
        "is_disabled": {
          "description": "Whether a pair type is disabled or not. If it is disabled, new pairs cannot be created, but existing ones can still read the pair configuration Default is false.",
          "default": false,
          "type": "boolean"
        },
        "is_generator_disabled": {
          "description": "Setting this to true means that pairs of this type will not be able to get an ASTRO generator Default is false.",
          "default": false,
          "type": "boolean"
        },
        "maker_fee_bps": {
          "description": "The amount of fees (in bps) collected by the Maker contract from this pair type",
          "type": "integer",
          "format": "uint16",
          "minimum": 0.0
        },
        "pair_type": {
          "description": "The pair type (provided in a [`PairType`])",
          "allOf": [
            {
              "$ref": "#/definitions/PairType"
            }
          ]
        },
        "permissioned": {
          "description": "If pool type is permissioned, only factory owner can create pairs of this type. Default is false.",
          "default": false,
          "type": "boolean"
        },
        "total_fee_bps": {
          "description": "The total fees (in bps) charged by a pair of this type",
          "type": "integer",
          "format": "uint16",
          "minimum": 0.0
        },
        "whitelist": {
          "description": "If permissioned, this is a list of addresses that are allowed to create pairs of this type",
          "default": null,
          "type": [
            "array",
            "null"
          ],
          "items": {
            "type": "string"
          }
        }
      },
      "additionalProperties": false
    },
    "PairType": {
      "description": "This enum describes available pair types. ## Available pool types ``` # use astroport::factory::PairType::{Custom, Stable, Xyk}; Xyk {}; Stable {}; Custom(String::from(\"Custom\")); ```",
      "oneOf": [
        {
          "description": "XYK pair type",
          "type": "object",
          "required": [
            "xyk"
          ],
          "properties": {
            "xyk": {
              "type": "object",
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        {
          "description": "Stable pair type",
          "type": "object",
          "required": [
            "stable"
          ],
          "properties": {
            "stable": {
              "type": "object",
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        {
          "description": "Custom pair type",
          "type": "object",
          "required": [
            "custom"
          ],
          "properties": {
            "custom": {
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "Uint128": {
      "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
      "type": "string"
    }
  }
}
