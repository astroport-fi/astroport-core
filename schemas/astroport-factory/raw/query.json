{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "QueryMsg",
  "description": "This structure describes the available query messages for the factory contract.",
  "oneOf": [
    {
      "description": "Config returns contract settings specified in the custom [`ConfigResponse`] structure.",
      "type": "object",
      "required": [
        "config"
      ],
      "properties": {
        "config": {
          "type": "object",
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Pair returns information about a specific pair according to the specified assets. Gets the first pool from the list WARNING: this endpoint is left only for backward compatability. Consider using `QueryMsg::PairsByAssetInfos` and selecting a pool address based on your needs.",
      "type": "object",
      "required": [
        "pair"
      ],
      "properties": {
        "pair": {
          "type": "object",
          "required": [
            "asset_infos"
          ],
          "properties": {
            "asset_infos": {
              "description": "The assets for which we return a pair",
              "type": "array",
              "items": {
                "$ref": "#/definitions/AssetInfo"
              }
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "description": "PairByAddr returns pair info for the specified pair address (if exists).",
      "type": "object",
      "required": [
        "pair_by_addr"
      ],
      "properties": {
        "pair_by_addr": {
          "type": "object",
          "required": [
            "pair_addr"
          ],
          "properties": {
            "pair_addr": {
              "description": "The pair address for which we return a [`PairInfo`]",
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "description": "PairsByAssetInfos returns a list of pairs for the specified assets.",
      "type": "object",
      "required": [
        "pairs_by_asset_infos"
      ],
      "properties": {
        "pairs_by_asset_infos": {
          "type": "object",
          "required": [
            "asset_infos"
          ],
          "properties": {
            "asset_infos": {
              "description": "The assets for which we return a pair",
              "type": "array",
              "items": {
                "$ref": "#/definitions/AssetInfo"
              }
            },
            "limit": {
              "description": "The number of pairs to read and return. Optional",
              "type": [
                "integer",
                "null"
              ],
              "format": "uint32",
              "minimum": 0.0
            },
            "start_after": {
              "description": "The pair address to start reading from. Optional",
              "type": [
                "string",
                "null"
              ]
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "description": "PairByLpToken returns a pair info for the specified liquidity token.",
      "type": "object",
      "required": [
        "pair_by_lp_token"
      ],
      "properties": {
        "pair_by_lp_token": {
          "type": "object",
          "required": [
            "lp_token"
          ],
          "properties": {
            "lp_token": {
              "description": "The liquidity token address for which we return a pair",
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Pairs returns an array of pairs and their information according to the specified parameters in `start_after` and `limit` variables.",
      "type": "object",
      "required": [
        "pairs"
      ],
      "properties": {
        "pairs": {
          "type": "object",
          "properties": {
            "limit": {
              "description": "The number of pairs to read and return. Optional",
              "type": [
                "integer",
                "null"
              ],
              "format": "uint32",
              "minimum": 0.0
            },
            "start_after": {
              "description": "The pair address to start reading from. Optional",
              "type": [
                "string",
                "null"
              ]
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "description": "FeeInfo returns fee parameters for a specific pair. The response is returned using a [`FeeInfoResponse`] structure",
      "type": "object",
      "required": [
        "fee_info"
      ],
      "properties": {
        "fee_info": {
          "type": "object",
          "required": [
            "pair_type"
          ],
          "properties": {
            "pair_type": {
              "description": "The pair type for which we return fee information. Pair type is a [`PairType`] struct",
              "allOf": [
                {
                  "$ref": "#/definitions/PairType"
                }
              ]
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Returns a vector that contains blacklisted pair types",
      "type": "object",
      "required": [
        "blacklisted_pair_types"
      ],
      "properties": {
        "blacklisted_pair_types": {
          "type": "object",
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    }
  ],
  "definitions": {
    "Addr": {
      "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
      "type": "string"
    },
    "AssetInfo": {
      "description": "This enum describes available Token types. ## Examples ``` # use cosmwasm_std::Addr; # use astroport::asset::AssetInfo::{NativeToken, Token}; Token { contract_addr: Addr::unchecked(\"stake...\") }; NativeToken { denom: String::from(\"uluna\") }; ```",
      "oneOf": [
        {
          "description": "Non-native Token",
          "type": "object",
          "required": [
            "token"
          ],
          "properties": {
            "token": {
              "type": "object",
              "required": [
                "contract_addr"
              ],
              "properties": {
                "contract_addr": {
                  "$ref": "#/definitions/Addr"
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        {
          "description": "Native token",
          "type": "object",
          "required": [
            "native_token"
          ],
          "properties": {
            "native_token": {
              "type": "object",
              "required": [
                "denom"
              ],
              "properties": {
                "denom": {
                  "type": "string"
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "PairType": {
      "description": "This enum describes available pair types. ## Available pool types ``` # use astroport::factory::PairType::{Custom, Stable, Xyk}; Xyk {}; Stable {}; Custom(String::from(\"Custom\")); ```",
      "oneOf": [
        {
          "description": "XYK pair type",
          "type": "object",
          "required": [
            "xyk"
          ],
          "properties": {
            "xyk": {
              "type": "object",
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        {
          "description": "Stable pair type",
          "type": "object",
          "required": [
            "stable"
          ],
          "properties": {
            "stable": {
              "type": "object",
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        {
          "description": "Custom pair type",
          "type": "object",
          "required": [
            "custom"
          ],
          "properties": {
            "custom": {
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      ]
    }
  }
}
